syntax = "proto3";

package gateway_worker;

// Health Check
message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
}

// Certificate Management
message CertificateRequest {
  string domain = 1;
  string certificate_type = 2;
}

message CertificateResponse {
  string domain = 1;
  string certificate_pem = 2;
  string private_key_pem = 3;
  string certificate_chain_pem = 4;
  int64 expires_at = 5;
  bool is_temporary = 6;
  string certificate_id = 7;
}

message CertificateWatchRequest {
  string gateway_id = 1;
  repeated string domains = 2;
}

message CertificateUpdate {
  string domain = 1;
  string certificate_pem = 2;
  string private_key_pem = 3;
  string certificate_chain_pem = 4;
  int64 expires_at = 5;
  bool is_temporary = 6;
  string certificate_id = 7;
  string update_type = 8; // "RENEWED", "TEMPORARY", "REVOKED"
}

// Configuration Management
message ConfigurationRequest {
  string gateway_id = 1;
  string config_type = 2;
  string config_version = 3;
}

message ConfigurationResponse {
  string config_type = 1;
  string config_version = 2;
  string config_data = 3;
  int64 updated_at = 4;
  string checksum = 5;
}

message UpdateConfigurationRequest {
  string gateway_id = 1;
  string config_type = 2;
  string config_data = 3;
  string checksum = 4;
}

message UpdateConfigurationResponse {
  bool success = 1;
  string message = 2;
  string config_version = 3;
}

message ConfigurationWatchRequest {
  string gateway_id = 1;
  repeated string config_types = 2;
}

message ConfigurationUpdate {
  string config_type = 1;
  string config_version = 2;
  string config_data = 3;
  int64 updated_at = 4;
  string checksum = 5;
  string update_type = 6; // "CREATED", "UPDATED", "DELETED"
}

// Log Processing
message LogEntry {
  string gateway_id = 1;
  int64 timestamp = 2;
  string level = 3;
  string message = 4;
  string source_ip = 5;
  string target_host = 6;
  string method = 7;
  string path = 8;
  int32 status_code = 9;
  int64 response_time_ms = 10;
  int64 bytes_sent = 11;
  int64 bytes_received = 12;
  string user_agent = 13;
  string session_id = 14;
  map<string, string> metadata = 15;
}

message LogProcessingResponse {
  bool success = 1;
  string message = 2;
  int32 processed_count = 3;
  int32 error_count = 4;
}

// Metrics
message MetricsRequest {
  string gateway_id = 1;
  int64 timestamp_from = 2;
  int64 timestamp_to = 3;
}

message MetricData {
  string name = 1;
  string type = 2; // "COUNTER", "GAUGE", "HISTOGRAM"
  double value = 3;
  int64 timestamp = 4;
  map<string, string> labels = 5;
}

message MetricsResponse {
  repeated MetricData metrics = 1;
}

// Main service definition
service GatewayWorkerService {
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Certificate management
  rpc GetCertificate(CertificateRequest) returns (CertificateResponse);
  rpc WatchCertificateUpdates(CertificateWatchRequest) returns (stream CertificateUpdate);
  
  // Configuration management
  rpc GetConfiguration(ConfigurationRequest) returns (ConfigurationResponse);
  rpc UpdateConfiguration(UpdateConfigurationRequest) returns (UpdateConfigurationResponse);
  rpc WatchConfigurationUpdates(ConfigurationWatchRequest) returns (stream ConfigurationUpdate);
  
  // Log processing
  rpc SendLogs(stream LogEntry) returns (LogProcessingResponse);
  
  // Metrics
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
}