syntax = "proto3";

package gateway_worker;

// Log processing messages
message LogEntry {
  string gateway_id = 1;
  int64 timestamp = 2; // Unix timestamp in nanoseconds
  LogLevel level = 3;
  LogType log_type = 4;
  string message = 5;
  map<string, string> metadata = 6;
  
  // Request specific fields
  optional RequestLogData request_data = 7;
  
  // Security specific fields
  optional SecurityLogData security_data = 8;
  
  // Performance specific fields
  optional PerformanceLogData performance_data = 9;
}

enum LogLevel {
  TRACE = 0;
  DEBUG = 1;
  INFO = 2;
  WARN = 3;
  ERROR = 4;
  FATAL = 5;
}

enum LogType {
  ACCESS = 0;
  SECURITY = 1;
  ERROR_LOG = 2;
  PERFORMANCE = 3;
  AUDIT = 4;
  SYSTEM = 5;
}

message RequestLogData {
  string request_id = 1;
  string method = 2;
  string uri = 3;
  int32 status_code = 4;
  int64 response_time_ms = 5;
  string client_ip = 6;
  string user_agent = 7;
  string referer = 8;
  int64 request_size = 9;
  int64 response_size = 10;
  string backend_address = 11;
  bool cache_hit = 12;
}

message SecurityLogData {
  string rule_id = 1;
  string rule_description = 2;
  string threat_type = 3; // "sql_injection", "xss", "path_traversal", etc.
  string severity = 4; // "low", "medium", "high", "critical"
  string action_taken = 5; // "blocked", "logged", "rate_limited"
  string client_ip = 6;
  string payload = 7; // Sanitized payload that triggered the rule
  string country = 8;
  string asn = 9;
}

message PerformanceLogData {
  string component = 1; // "proxy", "waf", "cache", "auth", etc.
  int64 execution_time_ms = 2;
  int64 memory_usage_bytes = 3;
  string operation = 4;
  bool was_cached = 5;
  int32 thread_id = 6;
}

message LogProcessingResponse {
  bool success = 1;
  string message = 2;
  int32 processed_count = 3;
  int32 error_count = 4;
}

// Metrics and analytics
message MetricsResponse {
  repeated MetricData metrics = 1;
  int64 timestamp = 2;
}

message MetricData {
  string name = 1;
  string type = 2; // "counter", "gauge", "histogram"
  double value = 3;
  map<string, string> labels = 4;
  int64 timestamp = 5;
}

// Real-time analytics requests
message AnalyticsRequest {
  string gateway_id = 1;
  int64 time_window_start = 2;
  int64 time_window_end = 3;
  repeated string metric_types = 4; // ["requests", "errors", "latency", "security"]
  map<string, string> filters = 5;
}

message AnalyticsResponse {
  repeated AnalyticsMetric metrics = 1;
  int64 generated_at = 2;
}

message AnalyticsMetric {
  string metric_name = 1;
  repeated DataPoint data_points = 2;
  map<string, string> metadata = 3;
}

message DataPoint {
  int64 timestamp = 1;
  double value = 2;
  map<string, string> dimensions = 3;
}

// Security event correlation
message SecurityEventCorrelationRequest {
  string client_ip = 1;
  int64 time_window_minutes = 2;
  repeated string threat_types = 3;
}

message SecurityEventCorrelationResponse {
  bool is_coordinated_attack = 1;
  string attack_pattern = 2;
  int32 event_count = 3;
  repeated string affected_endpoints = 4;
  string recommended_action = 5;
  double confidence_score = 6;
}